%% Composite Track Simulation: Kinematics and G Force Calculation
clear; clc; close all;

%-------------------------------
% User Adjustable Parameters
g = 9.81;          % gravitational acceleration (m/s^2)
h_init = 125;      % initial height (m)
n = 2000;          % number of sample points

% Section time boundaries (adjust these to space out sections)
T1     = 5*pi;     % End of helix (increase T1 to extend helix)
Delta1 = 5;        % Duration of helix→loop transition
T2     = T1 + Delta1;  
T_loop = 2*pi;     % Duration of loop
T3     = T2 + T_loop;  
Delta2 = 1;        % Duration of loop→projectile transition
T3p    = T3 + Delta2;
T_parab = 4;       % Duration of projectile (parabolic) segment
T4     = T3p + T_parab;
Delta3 = 4;        % Duration of transition from parabola to braking
T4p    = T4 + Delta3; % Start of the braking section
T_brake = 5;       % Duration of braking section
T5     = T4p + T_brake; % End of braking section

BrakeOffset = 100;  % (if needed)

theta0 = pi/6;     % Starting loop parameter (radians)
k_loop = 0.9;        % Loop parameter rate

%-------------------------------
% Create simulation time vector
t_values = linspace(0, T5, n);

% Define the composite track function using compTrack
compositeTrack = @(t) compTrack(t, T1, T2, T3, T3p, T4, T4p, T5, theta0, k_loop, g, h_init);

% Evaluate track positions
r_cell = arrayfun(@(tt) compositeTrack(tt), t_values, 'UniformOutput', false);
r_all = cell2mat(r_cell);
x_t = r_all(1,:);
y_t = r_all(2,:);
z_t = r_all(3,:);

% Bank angle (in degrees)
beta_values = 10 * ones(size(t_values));

% Compute kinematics and G force together.
% This function returns: arc length (s_track), curvature, positions, velocity, and G force (G_force).
[s_track, curvature, x_t, y_t, z_t, v_t, G_force] = ...
    computeKinematicsAndGforce(compositeTrack, h_init, t_values, beta_values, T1, T2, T3, T3p, T4, T4p, theta0, k_loop, g);

%-------------------------------
% Plot Arc Length vs. Time
figure;
plot(t_values, s_track, 'b-', 'LineWidth', 2);
xlabel('Time (s)'); ylabel('Arc Length (m)');
title('Arc Length vs. Time');
grid on;

% Plot Velocity vs. Time
figure;
plot(t_values, v_t, 'r-', 'LineWidth', 2);
xlabel('Time (s)'); ylabel('Velocity (m/s)');
title('Velocity vs. Time');
grid on;

% For G Force vs. Arc Length, find arc-length values corresponding to time boundaries.
[~, idx1] = min(abs(t_values - T1));
[~, idx2] = min(abs(t_values - T2));
[~, idx3] = min(abs(t_values - T3));
[~, idx3p] = min(abs(t_values - T3p));
[~, idx4] = min(abs(t_values - T4));
[~, idx4p] = min(abs(t_values - T4p));
[~, idx5] = min(abs(t_values - T5));
s_T1 = s_track(idx1);
s_T2 = s_track(idx2);
s_T3 = s_track(idx3);
s_T3p = s_track(idx3p);
s_T4 = s_track(idx4);
s_T4p = s_track(idx4p);
s_T5 = s_track(idx5);

% Plot G Force vs. Arc Length in one figure with three subplots
figure;
subplot(3,1,1);
plot(s_track, G_force(1,:), 'r-', 'LineWidth', 2);
xlabel('Arc Length (m)'); ylabel('FB G Force (G)');
title('Forward/Backward G Force vs. Arc Length');
grid on; hold on;
xline(s_T1, 'k--', 'T1'); xline(s_T2, 'k--', 'T2'); xline(s_T3, 'k--', 'T3');
xline(s_T3p, 'k--', 'T3p'); xline(s_T4, 'k--', 'T4'); xline(s_T4p, 'k--', 'T4p'); xline(s_T5, 'k--', 'T5'); hold off;

subplot(3,1,2);
plot(s_track, G_force(2,:), 'm-', 'LineWidth', 2);
xlabel('Arc Length (m)'); ylabel('Upward G Force (G)');
title('Upward G Force vs. Arc Length');
grid on; hold on;
xline(s_T1, 'k--'); xline(s_T2, 'k--'); xline(s_T3, 'k--'); 
xline(s_T3p, 'k--'); xline(s_T4, 'k--'); xline(s_T4p, 'k--'); xline(s_T5, 'k--'); hold off;

subplot(3,1,3);
plot(s_track, G_force(3,:), 'b-', 'LineWidth', 2);
xlabel('Arc Length (m)'); ylabel('Lateral G Force (G)');
title('Lateral G Force vs. Arc Length');
grid on; hold on;
xline(s_T1, 'k--'); xline(s_T2, 'k--'); xline(s_T3, 'k--'); 
xline(s_T3p, 'k--'); xline(s_T4, 'k--'); xline(s_T4p, 'k--'); xline(s_T5, 'k--'); hold off;

% Plot 3D Track
figure;
plot3(x_t, y_t, z_t, 'k-', 'LineWidth', 2);
xlabel('X (m)'); ylabel('Y (m)'); zlabel('Z (m)');
title('Composite 3D Track');
axis equal; grid on; rotate3d on;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Function: compTrack
function r = compTrack(t, T1, T2, T3, T3p, T4, T4p, T5, theta0, k_loop, g, h_init)
    %--- Segment 1: Helix ---
    if t < T1
        % Helix: (x,y) circular motion; z decreasing linearly
        r = [15*cos(t); 15*sin(t); h_init - (6/(2*pi))*t];
        
    %--- Segment 2: Transition from helix to loop ---
    elseif t < T2
        L = T2 - T1;                      % Transition duration
        s_val = (t - T1) / L;             % Normalized time in transition (0 to 1)
        % r1: Helix endpoint at T1 and its derivative (tangent)
        r1 = [15*cos(T1); 15*sin(T1); h_init - (6/(2*pi))*T1];
        r1p = [-15*sin(T1); 15*cos(T1); -6/(2*pi)];
        % r2: Target start of loop at T2
        r2 = [20*sin(theta0)+35; 0; h_init - 20*cos(theta0)-50];
        r2p_theta = [20*cos(theta0); 0; 20*sin(theta0)];
        r2p = k_loop * r2p_theta;
        % Cubic interpolation to blend from r1 to r2:
        a0 = r1;
        a1 = L * r1p;
        D = r2 - r1 - a1;
        a3 = L * r2p - a1 - 2*D;
        a2 = D - a3;
        r = a0 + a1*s_val + a2*s_val^2 + a3*s_val^3;
        
    %--- Segment 3: Loop ---
    elseif t < T3
        theta = theta0 + (t - T2)*k_loop;  % Loop angle increases linearly
        r = [20*sin(theta)+35; 0; h_init - 20*cos(theta)-50];
        
    %--- Segment 4: Transition from loop to projectile ---
    elseif t < T3p
        L2 = T3p - T3;
        s_val2 = (t - T3) / L2;
        theta_end = theta0 + (T3 - T2)*k_loop;
        r3 = [20*sin(theta_end)+50; 0; h_init - 20*cos(theta_end)-50];
        r3p = k_loop * [20*cos(theta_end); 0; 20*sin(theta_end)];
        % r_target: Desired projectile start offset from r3
        r_target = r3 + [30; 0; 30];
        v_target = [10; 0; 15];
        a0 = r3;
        a1 = L2 * r3p;
        D = r_target - r3 - a1;
        a3 = L2 * v_target - a1 - 2*D;
        a2 = D - a3;
        r = a0 + a1*s_val2 + a2*s_val2^2 + a3*s_val2^3;
        
    %--- Segment 5: Projectile (parabolic) motion ---
    elseif t < T4
        t_par = t - T3p;
        theta_end = theta0 + (T3 - T2)*k_loop;
        r4 = [20*sin(theta_end)+80; 0; h_init - 20*cos(theta_end)-20] + [20; 0; 15];
        v4 = [10; 0; 15];
        r = r4 + v4*t_par + [0; 0; -0.5*g*(t_par^2)];
        
    %--- Segment 6: Transition from projectile to braking start ---
    elseif t < T4p
        % First, compute projectile endpoint (at t = T4)
        t_par_full = T4 - T3p;
        theta_end = theta0 + (T3 - T2)*k_loop;
        r4 = [20*sin(theta_end)+80; 0; h_init - 20*cos(theta_end)-20] + [20; 0; 15];
        v4 = [10; 0; 15];
        r_proj_end = r4 + v4*t_par_full + [0; 0; -0.5*g*(t_par_full^2)];
        v_proj_end = v4 + [0; 0; -g*t_par_full];
        % Define braking start target: flat track with y=10, z=0, x=100.
        r_brake_start = [100; -50; 0];
        v_brake_start = [-10; 0; 0];  % Desired derivative at braking start.
        L3 = T4p - T4;  % Duration of transition
        s_val3 = (t - T4) / L3;  % Normalized time (0 to 1)
        % Cubic interpolation from r_proj_end to r_brake_start:
        a0 = r_proj_end;
        a1 = L3 * v_proj_end;
        D = r_brake_start - r_proj_end - a1;
        a3 = L3 * v_brake_start - a1 - 2*D;
        a2 = D - a3;
        r = a0 + a1*s_val3 + a2*s_val3^2 + a3*s_val3^3;
        
    %--- Segment 7: Braking section ---
    else
        % Braking: a straight line from r_brake_start to r_brake_end.
        % Define r_brake_end: flat track with y=10, z=0, x=0.
        r_brake_start = [100; -50; 0];
        r_brake_end = [0; -50; 0];
        L4 = T5 - T4p;    % Duration of braking
        s_val4 = (t - T4p) / L4;  % Normalized parameter (0 to 1)
        % Use linear interpolation for a straight line.
        r = (1 - s_val4)*r_brake_start + s_val4*r_brake_end;
    end
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Function: computeKinematicsAndGforce
function [s_track, curvature, x_t, y_t, z_t, v_t, G_force] = computeKinematicsAndGforce(r_func, h_init, time_vector, beta_vector, T1, T2, T3, T3p, T4, T4p, theta0, k_loop, g)
    % Evaluate track positions
    r_cell = arrayfun(@(tt) r_func(tt), time_vector, 'UniformOutput', false);
    r_t = cell2mat(r_cell);
    x_t = r_t(1,:); y_t = r_t(2,:); z_t = r_t(3,:);
    
    % Compute local speed using energy conservation: v = sqrt(2*g*(h_init - z))
    v_t = sqrt(2*g*(h_init - z_t));
    
    % Compute arc length using finite differences
    dt = diff(time_vector);
    dx = diff(x_t); dy = diff(y_t); dz = diff(z_t);
    ds = sqrt(dx.^2 + dy.^2 + dz.^2);
    s_track = cumtrapz(time_vector(1:end-1), ds);
    s_track = [s_track, s_track(end)];
    
    % Compute tangent vectors from position differences
    v_vec = [dx; dy; dz];
    T = v_vec ./ vecnorm(v_vec);
    nT = size(T,2);
    
    % Compute derivative of T with respect to arc length and curvature
    dT_ds = zeros(3, nT);
    for i = 2:nT-1
        ds_local = s_track(i+1) - s_track(i-1);
        dT_ds(:,i) = (T(:,i+1) - T(:,i-1)) / ds_local;
    end
    dT_ds(:,1) = (T(:,2) - T(:,1)) / (s_track(2)-s_track(1));
    dT_ds(:,end) = (T(:,end) - T(:,end-1)) / (s_track(end)-s_track(end-1));
    curvature = vecnorm(dT_ds);
    
    % Compute G force for each time using the gforce model
    G_force = zeros(3, length(time_vector));
    for i = 1:length(time_vector)
        G_force(:,i) = gforce(time_vector(i), T1, T2, T3, T3p, T4, T4p, theta0, k_loop, v_t(i), g);
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Function: gforce
function G_force = gforce(t, T1, T2, T3, T3p, T4, T4p, theta0, k_loop, v, g)
    if t < T1
        fb = 0;
        ud = ((sin(theta0)*v^2*k_loop)/g) + cos(theta0);  
        lr = ((cos(theta0)*v^2*k_loop)/g) - sin(theta0);
    elseif t < T2
        fb = 0; ud = 1; lr = 0;
    elseif t < T3
        theta = theta0 + (t - T2)*k_loop;
        fb = 0; ud = tan(theta); lr = 0;
    elseif t < T3p
        theta_end = theta0 + (T3 - T2)*k_loop;
        fb = 0; ud = tan(theta_end); lr = 0;
    elseif t < T4
        fb = 0; ud = 0; lr = 0;
    elseif t < T4p
        fb = 0; ud = 0; lr = 0;
    else
        fb = 0; ud = 0; lr = 0;
    end
    G_force = [fb; ud; lr];
end
